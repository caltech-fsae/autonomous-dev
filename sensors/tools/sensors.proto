syntax = "proto2";

// subclasses extended based on article:
// https://www.indelible.org/ink/protobuf-polymorphism/

message Car {
    repeated Sensor sensors = 1;
    repeated Obstacle obstacles = 2;
}

message Sensor {
    extensions 100 to max;
    enum SensorType {
        CAMERA = 0;
        ACCELERATION = 1;
        SPEED = 2;
        RADAR = 3;
        LIDAR = 4;
    }

    required SensorType type = 1;

    message Translate {
        optional double x = 1; // Axis defined to be positive out of camera.
        optional double y = 2;
        optional double z = 3;
    }

    message Rotate {
        optional double x = 1;
        optional double y = 2;
        optional double z = 3;
    }

    optional Translate translation = 2;
    optional Rotate rotation = 3;
}

message CameraParams {
    extend Sensor {
        required CameraParams sensor = 100;
    }
    optional double fov = 1; // Supplied in radians.
    optional double focal_length = 2;

    message ImageSize {
        optional int32 width = 1;
        optional int32 height = 2;
    }
    optional ImageSize image_size = 3;
    optional double bit_val = 4;
}

message AccelParams {
    extend Sensor {
        required AccelParams sensor = 101;
    }
    optional double accel = 1;
}

message SpeedParams {
    extend Sensor {
        required SpeedParams sensor = 102;
    }
    optional double speed = 1;
}

message RadarParams {
    extend Sensor {
        required RadarParams sensor = 103;
    }
    optional double range = 1;
    optional double response_time = 2;
    optional double beam_x = 3;        // in degrees or radians
    optional double beam_y = 4;
}

message LidarParams {
    extend Sensor {
        required LidarParams sensor = 104;
    }
    optional double range_closest = 1;  // meters
    optional double range_furthest = 2; // meters
    optional double accuracy = 3;       // +/- meters
    optional double response_time = 4;
    optional double frequency = 5;      // Hz
    optional double scan_speed = 6;     // seconds
    optional double beam_x = 7;         // in degrees or radians
    optional double beam_y = 8;
    optional double field = 9;          // in degrees or radians
    optional double angular_res = 10;    // in degrees or radians 
    optional double encoding_x = 11;    // x translation from encoding to lidar origin. in meters.
    optional double encoding_y = 12;    // y translation from encoding to lidar origin. in meters.
    optional double lidar_x = 13;       // x translation from lidar to vehicle origin. in meters.
    optional double lidar_y = 14;       // y translation from lidar to vehicle origin. in meters.
    optional double lidar_z = 15;       // z translation from lidar to vehicle origin. in meters.
}
